# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ScannerGui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
#code is a combination of automatically generated code by aforementioned code editor and additional code added
#by Ollie Church
#this code is a big giant 1100 lines long mess 
#This is the first time I have ever done GUI programming. 
#clearly it should be made more modular
#I also did not realise that the variable names that were set for the auto generated code were so terrible
#which adds to how difficult it is to read and understand this code.
#Lastly, this GUI was also created in a severely limited timeframe of about 10 days, 
#hence the lack of modularity and good variable names, and why in general it is very messy.
#A number of features are lacking in the GUI, see future work section on github read me. 
#The most crucial is the inability for the UI elements to resize if the window size is changed.

from PyQt5 import QtCore, QtGui, QtWidgets
from datetime import datetime
import time
import scanParams
import cleanScannerCode
import simpleIP
import os
from DIP import TI,CFRP
import matplotlib
matplotlib.use('Qt5Agg')
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure


#following if conditionals should enable scaling for high dpi displays
if hasattr(QtCore.Qt, 'AA_EnableHighDpiScaling'):
    QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)

if hasattr(QtCore.Qt, 'AA_UseHighDpiPixmaps'):
    QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps, True)


#this class is for creating to 3d contour plot in the GUI
class MplCanvas(FigureCanvasQTAgg):

    def __init__(self, parent=None, width=50, height=200, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111,projection='3d')
        super(MplCanvas, self).__init__(fig)

filelist = 


#scanning thread launched by GUI
class scanThread(QtCore.QObject):
    #connect signals to objects in scan thread (Not sure terminology is exactly right there)
    finished = QtCore.pyqtSignal()
    progress = QtCore.pyqtSignal(int)
    time = QtCore.pyqtSignal(int)
    earlyRows = QtCore.pyqtSignal(int)
    #create scanner object from scanner control class
    ScanObj = cleanScannerCode.scannerControl()

    callCounter = 0
    quit = 0

    def runScan(self):
        
        print(pd)
        #need to pass in parameter dictionary
        #call set scan params here.
        if(self.callCounter == 0):
            print('running set scan')
            #if first time running scan call set scan params
            self.ScanObj.setScanParams(pd)
        #increment call counter
        self.callCounter += 1
        #call scan function here
        tic = time.perf_counter()
        print(f'Tic is {tic}')
        for row in range(int(pd["nOfRows"])):
            #saves number of rows currently covered in parameter dictionary in case scan should finish early
            self.earlyRows.emit(row)
            #scan current row
            self.ScanObj.Scan(row)
            #computer percentage complete
            percentComplete = ((row/(pd["nOfRows"]))+ (pd['yResolutionMm']/pd['mmMovedY'])) *100

            if percentComplete == 100:
                #sleep to allow time for last row of signal processing to complete
                #is not always long enough and would be better if there was some sort of 
                #signal for signal processing instead
                #it's actually non essential, the signal processing will complete without the sleep
                #statement because it's in it's own thread but the wait is here so that the image processing runs 
                #on the full set of data collected, but the user can just run the image processing again using the button
                #in the GUI to do this anyway.
                time.sleep(2)
                #send progress to GUI element
                self.progress.emit(int(percentComplete))
                #send progress to GUI element
            
            #send progress to GUI element
            self.progress.emit(int(percentComplete))
            if(self.quit == 1):
                #if end scan is presed quit will be set to 1.
                #update time, sleep for same reason as when completete, set progress back to zero.
                self.time.emit(0)
                time.sleep(2)
                self.progress.emit(int(0))
                break
            toc = time.perf_counter()
            timeElapsed = toc - tic
             
            #TotalTime = ((timeElapsed/(row+1))*pd["nOfRows"])
            #have just removed this variable and put the expression on the RHS of time remaining as I believe
            #this is faster based on my knowledge of the python interpreter
            #calculate time remaining on scan
            timeRemaining = (timeElapsed/(row+1))*pd["nOfRows"]) - timeElapsed
            #update time remaining 
            self.time.emit(int(timeRemaining))



            

        
        
        self.ScanObj.endScan()
        print('getting to end of run scan')
        self.finished.emit()

    def stop(self):
        #function called by end scan button event to set quit to 1.
        self.quit = 1
 


        













class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        #this insanely long function defines the type, size, and position of all the UI
        #elements. As mentioned there must be a better way to do this but I didn't have time to find out how.


        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1022, 682)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        

        



        #icon = QtGui.QIcon()
        #icon.addPixmap(QtGui.QPixmap(":/icons/grid.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon = QtGui.QIcon('Images/loglog.gif')
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("QGroupBox {\n"
"        background-color:qlineargradient(spread:pad, x1:1, y1:1, x2:1, y2:0, stop:0 rgba(235, 235, 235, 255), stop:1 rgba(255, 255, 255, 255));\n"
"        border: 1px solid gray;\n"
"        border-radius: 6px;\n"
"        border-width: 1px;\n"
"        margin-top: 0.5em;\n"
"}\n"
"\n"
"QGroupBox::title {\n"
"    subcontrol-origin: margin;\n"
"    left: 10px;\n"
"    padding: 0 3px 0 3px;\n"
"}\n"
"\n"
"QTreeWidget {\n"
"        border: 1px white;\n"
"        border-radius: 6px;\n"
"        border-width: 1px;\n"
"        margin-top: 0.5em;\n"
"}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        # sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding,
                                                 QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(2)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setEnabled(True)
        self.tabWidget.setGeometry(QtCore.QRect(0, 10, 1021, 681))#1021
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding,
                                                 QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tabWidget.setFont(font)
        self.tabWidget.setStyleSheet("")
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Triangular)
        self.tabWidget.setIconSize(QtCore.QSize(16, 16))
        self.tabWidget.setObjectName("tabWidget")
        self.tabGeneral = QtWidgets.QWidget()
        self.tabGeneral.setObjectName("tabGeneral")
        self.frame = QtWidgets.QFrame(self.tabGeneral)
        self.frame.setGeometry(QtCore.QRect(10, 10, 1001, 641))
        self.frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.groupBoxFanControl = QtWidgets.QGroupBox(self.frame)
        self.groupBoxFanControl.setGeometry(QtCore.QRect(20, 50, 941, 491))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBoxFanControl.setFont(font)
        self.groupBoxFanControl.setObjectName("groupBoxFanControl")
        self.groupBoxFan1 = QtWidgets.QGroupBox(self.groupBoxFanControl)
        self.groupBoxFan1.setGeometry(QtCore.QRect(20, 150, 181, 81))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.groupBoxFan1.setFont(font)
        self.groupBoxFan1.setObjectName("groupBoxFan1")
        self.label_152 = QtWidgets.QLabel(self.groupBoxFan1)
        self.label_152.setGeometry(QtCore.QRect(110, 30, 41, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_152.setFont(font)
        self.label_152.setObjectName("label_152")
        self.groupBoxFan1_2 = QtWidgets.QGroupBox(self.groupBoxFan1)
        self.groupBoxFan1_2.setGeometry(QtCore.QRect(0, 0, 181, 81))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.groupBoxFan1_2.setFont(font)
        self.groupBoxFan1_2.setObjectName("groupBoxFan1_2")
        self.label_155 = QtWidgets.QLabel(self.groupBoxFan1_2)
        self.label_155.setGeometry(QtCore.QRect(110, 30, 41, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_155.setFont(font)
        self.label_155.setObjectName("label_155")
        self.coilFrequency = QtWidgets.QSpinBox(self.groupBoxFan1_2)
        self.coilFrequency.setGeometry(QtCore.QRect(30, 30, 71, 31))
        self.coilFrequency.setObjectName("coilFrequency")
        self.coilFrequency.setRange(0,1500)
        self.coilFrequency.setSingleStep(5)
        self.groupBoxFan2 = QtWidgets.QGroupBox(self.groupBoxFanControl)
        self.groupBoxFan2.setGeometry(QtCore.QRect(550, 150, 181, 81))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.groupBoxFan2.setFont(font)
        self.groupBoxFan2.setObjectName("groupBoxFan2")
        self.label_153 = QtWidgets.QLabel(self.groupBoxFan2)
        self.label_153.setGeometry(QtCore.QRect(110, 30, 21, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_153.setFont(font)
        self.label_153.setObjectName("label_153")
        self.Xdimension = QtWidgets.QSpinBox(self.groupBoxFan2)
        self.Xdimension.setGeometry(QtCore.QRect(30, 30, 71, 31))
        self.Xdimension.setObjectName("Xdimension")
        self.Xdimension.setRange(0,220)
        self.Xdimension.setSingleStep(5)
        self.groupBoxFan3 = QtWidgets.QGroupBox(self.groupBoxFanControl)
        self.groupBoxFan3.setGeometry(QtCore.QRect(550, 250, 181, 81))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.groupBoxFan3.setFont(font)
        self.groupBoxFan3.setObjectName("groupBoxFan3")
        self.label_154 = QtWidgets.QLabel(self.groupBoxFan3)
        self.label_154.setGeometry(QtCore.QRect(110, 30, 55, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_154.setFont(font)
        self.label_154.setObjectName("label_154")
        self.Xresolution = QtWidgets.QDoubleSpinBox(self.groupBoxFan3)
        self.Xresolution.setGeometry(QtCore.QRect(30, 30, 71, 31))
        self.Xresolution.setObjectName("Xresolution")
        self.Xresolution.setRange(0,10)
        self.Xresolution.setSingleStep(0.01)
        self.groupBoxFan4 = QtWidgets.QGroupBox(self.groupBoxFanControl)
        self.groupBoxFan4.setGeometry(QtCore.QRect(220, 150, 171, 81))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.groupBoxFan4.setFont(font)
        self.groupBoxFan4.setObjectName("groupBoxFan4")
        self.label_158 = QtWidgets.QLabel(self.groupBoxFan4)
        self.label_158.setGeometry(QtCore.QRect(100, 30, 55, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_158.setFont(font)
        self.label_158.setObjectName("label_158")
        self.sensorFrequency = QtWidgets.QSpinBox(self.groupBoxFan4)
        self.sensorFrequency.setGeometry(QtCore.QRect(30, 30, 61, 31))
        self.sensorFrequency.setObjectName("sensorFrequency")
        self.sensorFrequency.setRange(0,100)
        self.sensorFrequency.setSingleStep(1)
        self.groupBoxFan6 = QtWidgets.QGroupBox(self.groupBoxFanControl)
        self.groupBoxFan6.setGeometry(QtCore.QRect(750, 250, 181, 81))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.groupBoxFan6.setFont(font)
        self.groupBoxFan6.setObjectName("groupBoxFan6")
        self.label_159 = QtWidgets.QLabel(self.groupBoxFan6)
        self.label_159.setGeometry(QtCore.QRect(100, 30, 55, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_159.setFont(font)
        self.label_159.setObjectName("label_159")
        self.Yresolution = QtWidgets.QDoubleSpinBox(self.groupBoxFan6)
        self.Yresolution.setGeometry(QtCore.QRect(30, 30, 61, 31))
        self.Yresolution.setObjectName("Yresolution")
        self.Yresolution.setRange(0,10)
        self.Yresolution.setSingleStep(0.01)
        self.groupBoxFan5 = QtWidgets.QGroupBox(self.groupBoxFanControl)
        self.groupBoxFan5.setGeometry(QtCore.QRect(750, 150, 181, 81))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.groupBoxFan5.setFont(font)
        self.groupBoxFan5.setObjectName("groupBoxFan5")
        self.label_160 = QtWidgets.QLabel(self.groupBoxFan5)
        self.label_160.setGeometry(QtCore.QRect(100, 30, 55, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_160.setFont(font)
        self.label_160.setObjectName("label_160")
        self.Ydimension = QtWidgets.QSpinBox(self.groupBoxFan5)
        self.Ydimension.setGeometry(QtCore.QRect(30, 30, 61, 31))
        self.Ydimension.setObjectName("Ydimension")
        self.Ydimension.setRange(0,250)
        self.Ydimension.setSingleStep(5)
        self.groupBoxSimulateTemperatures = QtWidgets.QGroupBox(self.groupBoxFanControl)
        self.groupBoxSimulateTemperatures.setEnabled(True)
        self.groupBoxSimulateTemperatures.setGeometry(QtCore.QRect(670, 355, 161, 81))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.groupBoxSimulateTemperatures.setFont(font)
        self.groupBoxSimulateTemperatures.setObjectName("groupBoxSimulateTemperatures")
        self.label_161 = QtWidgets.QLabel(self.groupBoxSimulateTemperatures)
        self.label_161.setGeometry(QtCore.QRect(100, 30, 55, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_161.setFont(font)
        self.label_161.setObjectName("label_161")
        self.motorSpeed = QtWidgets.QSpinBox(self.groupBoxSimulateTemperatures)
        self.motorSpeed.setGeometry(QtCore.QRect(30, 30, 61, 31))
        self.motorSpeed.setObjectName("motorSpeed")
        self.titSettings = QtWidgets.QPushButton(self.groupBoxFanControl)
        self.titSettings.setGeometry(QtCore.QRect(175, 40, 261, 61))
        self.titSettings.setObjectName("titSettings")
        self.titSettings.setStyleSheet("background-image: url(./Images/titanium1.png);font-weight:bold")
        self.titSettings.clicked.connect(self.setTitaniumSettings)
        self.CFRPsettings = QtWidgets.QPushButton(self.groupBoxFanControl)
        self.CFRPsettings.setGeometry(QtCore.QRect(500, 40, 261, 61))
        self.CFRPsettings.setObjectName("CFRPsettings")

        # font = QtGui.QFont()
        # font.setPointSize(7)
        # font.setStyleSheet("color: white")
        # self.CFRPsettings.setFont(font)
        self.CFRPsettings.setStyleSheet("background-image: url(./Images/CFRP.png); color:white;font-weight:bold")
        self.CFRPsettings.clicked.connect(self.setCFRPSettings)

        self.groupBoxFan4_2 = QtWidgets.QGroupBox(self.groupBoxFanControl)
        self.groupBoxFan4_2.setGeometry(QtCore.QRect(220, 250, 171, 81))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.groupBoxFan4_2.setFont(font)
        self.groupBoxFan4_2.setObjectName("groupBoxFan4_2")
        self.label_162 = QtWidgets.QLabel(self.groupBoxFan4_2)
        self.label_162.setGeometry(QtCore.QRect(100, 30, 55, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_162.setFont(font)
        self.label_162.setObjectName("label_162")
        self.sensorAmplitude = QtWidgets.QDoubleSpinBox(self.groupBoxFan4_2)
        self.sensorAmplitude.setGeometry(QtCore.QRect(30, 30, 61, 31))
        self.sensorAmplitude.setObjectName("sensorAmplitude")
        self.sensorAmplitude.setRange(0,5)
        self.sensorAmplitude.setSingleStep(0.05)
        self.groupBoxFan1_3 = QtWidgets.QGroupBox(self.groupBoxFanControl)
        self.groupBoxFan1_3.setGeometry(QtCore.QRect(20, 250, 181, 81))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.groupBoxFan1_3.setFont(font)
        self.groupBoxFan1_3.setObjectName("groupBoxFan1_3")
        self.label_156 = QtWidgets.QLabel(self.groupBoxFan1_3)
        self.label_156.setGeometry(QtCore.QRect(110, 30, 41, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_156.setFont(font)
        self.label_156.setObjectName("label_156")
        self.coilAmplitude = QtWidgets.QDoubleSpinBox(self.groupBoxFan1_3)
        self.coilAmplitude.setGeometry(QtCore.QRect(30, 30, 71, 31))
        self.coilAmplitude.setObjectName("coilAmplitude")
        self.coilAmplitude.setRange(0,5)
        self.coilAmplitude.setSingleStep(0.05)
        self.confirmSP = QtWidgets.QPushButton(self.groupBoxFanControl)
        self.confirmSP.setGeometry(QtCore.QRect(370, 360, 211, 81))
        self.confirmSP.setObjectName("confirmSP")
        self.confirmSP.clicked.connect(self.switchToRun)
        self.label_172 = QtWidgets.QLabel(self.groupBoxFanControl)
        self.label_172.setGeometry(QtCore.QRect(150, 110, 2*91, 2*21))

        self.picoBox = QtWidgets.QGroupBox(self.groupBoxFanControl)
        self.picoBox.setGeometry(QtCore.QRect(100, 355, 161, 81))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)


        self.picoBox.setFont(font)
        self.picoBox.setObjectName("picoBox")
        self.picoRes = QtWidgets.QComboBox(self.picoBox)
        self.picoRes.setGeometry(QtCore.QRect(45, 27, 55, 40))
        self.picoRes.setObjectName("picoRes")
        self.picoRes.addItem("")
        self.picoRes.addItem("")
        self.picoRes.addItem("")
        self.picoRes.addItem("")
        self.picoRes.addItem("")

        self.resLabel = QtWidgets.QLabel(self.picoBox)
        self.resLabel.setGeometry(QtCore.QRect(95, 30, 41, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.resLabel.setFont(font)
        self.resLabel.setObjectName("resLabel")




        font = QtGui.QFont()
        font.setPointSize(8)
        self.label_172.setFont(font)
        self.label_172.setObjectName("label_172")
        self.label_173 = QtWidgets.QLabel(self.groupBoxFanControl)
        self.label_173.setGeometry(QtCore.QRect(640, 120, 1200, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label_173.setFont(font)
        self.label_173.setObjectName("label_173")
        self.tabWidget.addTab(self.tabGeneral, "")
        self.Run = QtWidgets.QWidget()
        self.Run.setObjectName("Run")
        self.frame_6 = QtWidgets.QFrame(self.Run)
        self.frame_6.setGeometry(QtCore.QRect(11, 11, 993, 641))
        self.frame_6.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.frame_6.setLineWidth(2)
        self.frame_6.setObjectName("frame_6")
        self.groupBoxCurrentFanStatus_2 = QtWidgets.QGroupBox(self.frame_6)
        self.groupBoxCurrentFanStatus_2.setGeometry(QtCore.QRect(10, -3, 281, 291))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBoxCurrentFanStatus_2.setFont(font)
        self.groupBoxCurrentFanStatus_2.setObjectName("groupBoxCurrentFanStatus_2")
        self.progressBar = QtWidgets.QProgressBar(self.groupBoxCurrentFanStatus_2)
        self.progressBar.setGeometry(QtCore.QRect(20, 250, 220, 10))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.label = QtWidgets.QLabel(self.groupBoxCurrentFanStatus_2)
        self.label.setGeometry(QtCore.QRect(20, 230, 191, 16))
        self.label.setObjectName("label")
        self.timelabel = QtWidgets.QLabel(self.groupBoxCurrentFanStatus_2) 
        self.timelabel.setGeometry(QtCore.QRect(20, 265, 300, 16))
        self.timelabel.setObjectName("Timelabel")
        self.endScan = QtWidgets.QPushButton(self.groupBoxCurrentFanStatus_2)
        self.endScan.setGeometry(QtCore.QRect(150, 120, 121, 91))
        self.endScan.setObjectName("endScan")
        self.endScan.setStyleSheet("background-color:red")
        self.endScan.clicked.connect(self.quitScan)
        self.startScan = QtWidgets.QPushButton(self.groupBoxCurrentFanStatus_2)
        self.startScan.setGeometry(QtCore.QRect(10, 120, 121, 91))
        self.startScan.setObjectName("startScan")
        self.startScan.setStyleSheet("background-color:green")
        self.scanCount = 1
        self.startScan.clicked.connect(self.startScanThread)
        self.editSP = QtWidgets.QPushButton(self.groupBoxCurrentFanStatus_2)
        self.editSP.setGeometry(QtCore.QRect(10, 20, 261, 91))
        self.editSP.setObjectName("editSP")
        self.editSP.clicked.connect(self.editParams)
        self.editSP.setStyleSheet("background-color:orange")
        self.groupBoxCurrentFanStatus_3 = QtWidgets.QGroupBox(self.frame_6)
        self.groupBoxCurrentFanStatus_3.setGeometry(QtCore.QRect(300, -3, 681, 516))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBoxCurrentFanStatus_3.setFont(font)
        self.groupBoxCurrentFanStatus_3.setObjectName("groupBoxCurrentFanStatus_3")
        self.contourPlot = QtWidgets.QVBoxLayout(self.groupBoxCurrentFanStatus_3)

        
        
        self.OutImage = QtWidgets.QLabel(self.groupBoxCurrentFanStatus_3)
        self.OutImage.setGeometry(QtCore.QRect(10, 20, 681, 516))
        self.OutImage.setText("")
        self.OutImage.setObjectName("OutImage")

        self.movieLabel = QtWidgets.QLabel(self.groupBoxCurrentFanStatus_3)
        self.movieLabel.setGeometry(150, 0, 681, 516)
        self.movieLabel.setText("")
        self.movieLabel.setObjectName("movie")



        self.contourPlot.addWidget(self.OutImage)
        #self.contourPlot.addWidget(self.movieLabel)
        self.sc = MplCanvas(self, width=50, height=200, dpi=100)
        self.contourPlot.addWidget(self.sc)
        self.OutImage.hide()
        self.sc.hide()
       


        
        self.IPOPtions = QtWidgets.QGroupBox(self.frame_6)
        self.IPOPtions.setGeometry(QtCore.QRect(300, 516, 285, 91))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.IPOPtions.setFont(font)
        self.IPOPtions.setObjectName("IPArea")
        self.IPArea = QtWidgets.QLabel(self.IPOPtions)
        self.IPArea.setGeometry(QtCore.QRect(300, 516, 335, 91))
        self.IPArea.setText("")
        self.IPArea.setObjectName("IPArea")
        self.exportData = QtWidgets.QPushButton(self.IPOPtions)
        self.exportData.setGeometry(QtCore.QRect(145, 25, 130, 50))
        self.exportData.setObjectName("exportData")
        self.exportData.clicked.connect(self.file_save)
        self.genImage = QtWidgets.QPushButton(self.IPOPtions)
        self.genImage.setGeometry(QtCore.QRect(10, 25, 130, 50))
        self.genImage.setObjectName("genImage")
        self.genImage.clicked.connect(self.generateImage)

        self.scanLog = QtWidgets.QGroupBox(self.frame_6)
        self.scanLog.setGeometry(QtCore.QRect(606, 516, 375, 91))
        self.scanLogBlue = QtWidgets.QGroupBox(self.frame_6)
        self.scanLogBlue.setGeometry(QtCore.QRect(606, 516, 375, 91))
        self.scanLogBlue.setStyleSheet("background-color:rgba(60, 106, 188, 0.52);")
        self.scanLogBlue.hide()
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.scanLog.setFont(font)
        self.scanLog.setObjectName("scanLog")
        self.scanLogText = QtWidgets.QLabel(self.scanLog) 
        self.scanLogText.setGeometry(QtCore.QRect(16,15, 300, 50))
        self.scanLogText.setObjectName("scanLogText")
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(75)
        self.scanLogText.setFont(font)
        self.scanLogArea = QtWidgets.QLabel(self.scanLog)
        self.scanLogArea.setGeometry(QtCore.QRect(646, 516, 335, 91))
        self.scanLogArea.setText("")
        self.scanLogArea.setObjectName("scanLogArea")







        self.groupBoxCurrentFanStatus_5 = QtWidgets.QGroupBox(self.frame_6)
        self.groupBoxCurrentFanStatus_5.setGeometry(QtCore.QRect(10, 297, 281, 311))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBoxCurrentFanStatus_5.setFont(font)
        self.groupBoxCurrentFanStatus_5.setObjectName("groupBoxCurrentFanStatus_5")
        self.groupBoxFan4_5 = QtWidgets.QGroupBox(self.groupBoxCurrentFanStatus_5)
        self.groupBoxFan4_5.setGeometry(QtCore.QRect(16, 120, 241, 180))
        self.ipLabel = QtWidgets.QLabel(self.groupBoxCurrentFanStatus_5) 
        self.ipLabel.setGeometry(QtCore.QRect(16, 30, 250, 20))
        self.ipLabel.setObjectName("ipLabel")
        self.ipMode = QtWidgets.QComboBox(self.groupBoxCurrentFanStatus_5)
        self.ipMode.setGeometry(QtCore.QRect(16, 60, 220, 22))
        self.ipMode.setObjectName("ipMode")
        self.ipMode.addItem("")
        self.ipMode.addItem("")
        self.ipMode.currentIndexChanged.connect(self.switchIP)
        font2 = QtGui.QFont()
        font2.setPointSize(9)
        font2.setBold(False)
        self.ipMode.setFont(font2)
        font.setWeight(75)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.groupBoxFan4_5.setFont(font)
        self.groupBoxFan4_5.setObjectName("groupBoxFan4_5")
        self.colourMaps = QtWidgets.QComboBox(self.groupBoxFan4_5)
        self.colourMaps.setGeometry(QtCore.QRect(130, 75, 90, 31))
        self.colourMaps.setObjectName("colourMaps")
        self.colourMaps.addItem("")
        self.colourMaps.addItem("")
        self.colourMaps.addItem("")
        self.colourMaps.addItem("")
        self.colourMaps.addItem("")
        self.cmLabel = QtWidgets.QLabel(self.groupBoxFan4_5) 
        self.cmLabel.setGeometry(QtCore.QRect(36, 81, 100, 20))
        self.cmLabel.setObjectName("cmLabel")


        self.plotType = QtWidgets.QComboBox(self.groupBoxFan4_5)
        self.plotType.setGeometry(QtCore.QRect(140, 30, 80, 31))
        self.plotType.setObjectName("ptMenu")
        self.plotType.addItem("")
        self.plotType.addItem("")
        self.plotTypeLabel = QtWidgets.QLabel(self.groupBoxFan4_5) 
        self.plotTypeLabel.setGeometry(QtCore.QRect(36, 36, 100, 20))
        self.plotTypeLabel.setObjectName("ptLabel")




        self.groupBoxFan4_5.hide()
        self.groupBoxFan4_6 = QtWidgets.QGroupBox(self.groupBoxCurrentFanStatus_5)
        self.groupBoxFan4_6.setGeometry(QtCore.QRect(16, 120, 241, 180))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.groupBoxFan4_6.setFont(font)
        self.groupBoxFan4_6.setObjectName("groupBoxFan4_6")
        self.zhangSettings = QtWidgets.QComboBox(self.groupBoxFan4_6)
        self.zhangSettings.setGeometry(QtCore.QRect(130, 30, 105, 31))
        self.zhangSettings.setObjectName("zhangSettings")
        self.zhangSettings.addItem("")
        self.zhangSettings.addItem("")
        
        self.mLabel = QtWidgets.QLabel(self.groupBoxFan4_6) 
        self.mLabel.setGeometry(QtCore.QRect(20, 35, 50, 20))
        self.mLabel.setObjectName("mLabel")

        self.outputLabel = QtWidgets.QLabel(self.groupBoxFan4_6) 
        self.outputLabel.setGeometry(QtCore.QRect(20, 135, 90, 20))
        self.outputLabel.setObjectName("outputLabel")

        self.outputFile = QtWidgets.QComboBox(self.groupBoxFan4_6)
        self.outputFile.setGeometry(QtCore.QRect(90, 130, 140, 31))
        self.outputFile.setObjectName("outputFile")
        self.outputFile.addItem("")
        self.outputFile.addItem("")
        self.outputFile.addItem("")

        
        # self.zhangOptions = QtWidgets.QComboBox(self.groupBoxFan4_6)
        # self.zhangOptions.setGeometry(QtCore.QRect(70, 90, 151, 31))
        # self.zhangOptions.setObjectName("zhangOptions")
        # self.zhangOptions.addItem("")
        # self.zhangOptions.addItem("")
        # self.zhangOptions.addItem("")
        # self.zhangOptions.addItem("")
        # self.zhangOptions.addItem("")


        self.binThresh = QtWidgets.QSpinBox(self.groupBoxFan4_6)
        self.binThresh.setGeometry(QtCore.QRect(165, 80, 61, 31))
        self.binThresh.setObjectName("binThresh")
        self.binThresh.setRange(0,255)
        self.binThresh.setSingleStep(1)
        self.binThresh.setValue(150)
        self.thresholdLabel = QtWidgets.QLabel(self.groupBoxFan4_6) 
        self.thresholdLabel.setGeometry(QtCore.QRect(20, 85, 150, 20))
        self.thresholdLabel.setObjectName("thresholdLabel")
        font2 = QtGui.QFont()
        font2.setPointSize(7)
        font2.setBold(False)
        self.thresholdLabel2 = QtWidgets.QLabel(self.groupBoxFan4_6) 
        self.thresholdLabel2.setGeometry(QtCore.QRect(150, 110, 150, 20))
        self.thresholdLabel2.setObjectName("thresholdLabel2")
        self.thresholdLabel2.setFont(font2)




        self.tabWidget.addTab(self.Run, "")
        self.tabRenameFans = QtWidgets.QWidget()
        self.tabRenameFans.setEnabled(True)
        self.tabRenameFans.setObjectName("tabRenameFans")
        self.groupBoxFanNames = QtWidgets.QGroupBox(self.tabRenameFans)
        self.groupBoxFanNames.setEnabled(True)
        self.groupBoxFanNames.setGeometry(QtCore.QRect(20, 20, 231, 401))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.groupBoxFanNames.setFont(font)
        self.groupBoxFanNames.setObjectName("groupBoxFanNames")
        self.label_77 = QtWidgets.QLabel(self.groupBoxFanNames)
        self.label_77.setGeometry(QtCore.QRect(20, 80, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_77.setFont(font)
        self.label_77.setObjectName("label_77")
        self.label_6 = QtWidgets.QLabel(self.groupBoxFanNames)
        self.label_6.setGeometry(QtCore.QRect(20, 40, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_78 = QtWidgets.QLabel(self.groupBoxFanNames)
        self.label_78.setGeometry(QtCore.QRect(20, 120, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_78.setFont(font)
        self.label_78.setObjectName("label_78")
        self.groupBoxCurrentFanStatus_4 = QtWidgets.QGroupBox(self.tabRenameFans)
        self.groupBoxCurrentFanStatus_4.setGeometry(QtCore.QRect(280, 20, 681, 611))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBoxCurrentFanStatus_4.setFont(font)
        self.groupBoxCurrentFanStatus_4.setObjectName("groupBoxCurrentFanStatus_4")
        self.OutImage_2 = QtWidgets.QLabel(self.groupBoxCurrentFanStatus_4)
        self.OutImage_2.setGeometry(QtCore.QRect(10, 20, 661, 581))
        self.OutImage_2.setText("")
        self.OutImage_2.setObjectName("OutImage_2")
        #self.tabWidget.addTab(self.tabRenameFans, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 1440, 24))
        self.menuBar.setObjectName("menuBar")
        MainWindow.setMenuBar(self.menuBar)
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.ipMode.setCurrentIndex(1)
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
       

    def retranslateUi(self, MainWindow):
        #this function adds all the text to their respective UI elements.
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "QW-ECT XY Scanner Software"))
        self.groupBoxFanControl.setTitle(_translate("MainWindow", "Set Scan Parameters"))
        self.groupBoxFan1.setTitle(_translate("MainWindow", "Coil Frequency"))
        self.label_152.setText(_translate("MainWindow", "kHz"))
        self.groupBoxFan1_2.setTitle(_translate("MainWindow", "Coil Frequency"))
        self.label_155.setText(_translate("MainWindow", "kHz"))
        self.groupBoxFan2.setTitle(_translate("MainWindow", "Size of Test piece (x-direction)"))
        self.label_153.setText(_translate("MainWindow", "mm"))
        self.groupBoxFan3.setTitle(_translate("MainWindow", "Resolution of x-axis"))
        self.label_154.setText(_translate("MainWindow", "mm"))
        self.groupBoxFan4.setTitle(_translate("MainWindow", "Sensor Frequency"))
        self.label_158.setText(_translate("MainWindow", "kHz"))
        self.groupBoxFan6.setTitle(_translate("MainWindow", "Resolution of y-axis"))
        self.label_159.setText(_translate("MainWindow", "mm"))
        self.groupBoxFan5.setTitle(_translate("MainWindow", "Size of Test piece(y-direction)"))
        self.label_160.setText(_translate("MainWindow", "mm"))
        self.groupBoxSimulateTemperatures.setTitle(_translate("MainWindow", "Motor speed (% of Maximum)"))
        self.label_161.setText(_translate("MainWindow", "%"))
        self.titSettings.setText(_translate("MainWindow", "Recommended settings for Titanium"))
        self.CFRPsettings.setText(_translate("MainWindow", "Recommended settings for CFRP"))
        self.groupBoxFan4_2.setTitle(_translate("MainWindow", "Sensor Amplitude"))
        self.label_162.setText(_translate("MainWindow", "Vrms"))
        self.groupBoxFan1_3.setTitle(_translate("MainWindow", "Coil Amplitude"))
        self.label_156.setText(_translate("MainWindow", "Vrms"))
        #self.picoLabel.setText(_translate("MainWindow", "PicoScope Resolution"))
        self.picoBox.setTitle(_translate("MainWindow", "PicoScope Resolution"))
        self.confirmSP.setText(_translate("MainWindow", "Confirm Scan Parameters"))
        self.label_172.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt;\">Input Signals</span></p></body></html>"))
        self.label_173.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt;\">Dimensions and Resolution</span></p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabGeneral), _translate("MainWindow", "Scan Parameters"))
        self.groupBoxCurrentFanStatus_2.setTitle(_translate("MainWindow", "Scan Status"))
        self.label.setText(_translate("MainWindow", "Scan Progress"))
        self.timelabel.setText(_translate("MainWindow", "Time Remaining:"))
        self.endScan.setText(_translate("MainWindow", "End\n Scan"))
        self.startScan.setText(_translate("MainWindow", "Start\n Scan"))
        self.editSP.setText(_translate("MainWindow", "Edit Scan Parameters"))
        self.groupBoxCurrentFanStatus_3.setTitle(_translate("MainWindow", "Scanner Output Image"))
        self.groupBoxCurrentFanStatus_5.setTitle(_translate("MainWindow", "Output Image Options"))
        self.ipLabel.setText(_translate("MainWindow", "Select Image Processing Method:"))
        self.mLabel.setText(_translate("MainWindow","Material:"))
        self.outputLabel.setText(_translate("MainWindow","Output File:"))
        self.cmLabel.setText(_translate("MainWindow","Colour Map:"))


        
        #these are all the possible settings of picoscope resolution.
        self.picoRes.setItemText(0, _translate("MainWindow", "16"))
        self.picoRes.setItemText(1, _translate("MainWindow", "15"))
        self.picoRes.setItemText(2, _translate("MainWindow", "14"))
        self.picoRes.setItemText(3, _translate("MainWindow", "12"))
        self.picoRes.setItemText(4, _translate("MainWindow", "8"))
        self.resLabel.setText(_translate("MainWindow", "Bits"))


        self.thresholdLabel.setText(_translate("MainWindow","Binarization Threshold:"))
        self.thresholdLabel2.setText(_translate("MainWindow","Pixel Intensity (0-255)"))
        self.ipMode.setItemText(0, _translate("MainWindow", "Custom QW-ECT Image Processing"))
        self.ipMode.setItemText(1, _translate("MainWindow", "Generic Matplotlib Image Processing"))
        self.groupBoxFan4_5.setTitle(_translate("MainWindow", "Image Processing Parameters"))
        #these are just some colour maps we liked that seemed to work well.
        #more could be added, see matplotlib colour maps documentation.
        self.colourMaps.setItemText(0, _translate("MainWindow", "jet"))
        self.colourMaps.setItemText(1, _translate("MainWindow", "Spectral"))
        self.colourMaps.setItemText(2, _translate("MainWindow", "viridis"))
        self.colourMaps.setItemText(3, _translate("MainWindow", "Blues"))
        self.colourMaps.setItemText(4, _translate("MainWindow", "coolwarm"))
        self.plotType.setItemText(0,_translate("MainWindow","2D"))
        self.plotType.setItemText(1,_translate("MainWindow","3D"))
        self.plotTypeLabel.setText(_translate("MainWindow","Plot Type:"))
        self.groupBoxFan4_6.setTitle(_translate("MainWindow", "Image Processing Parameters"))
        self.zhangSettings.setItemText(0, _translate("MainWindow", "Titanium"))
        self.zhangSettings.setItemText(1, _translate("MainWindow", "CFRP"))

        self.outputFile.setItemText(0, _translate("MainWindow", "Raw Output"))
        self.outputFile.setItemText(1, _translate("MainWindow", "Binarised Output"))
        self.outputFile.setItemText(2, _translate("MainWindow", "Defect Detection"))
        

        self.scanLog.setTitle(_translate("MainWindow", "Scan Log"))
        self.IPOPtions.setTitle(_translate("MainWindow", "Data Controls"))
        self.scanLogText.setText(_translate("MainWindow", "No Log Yet"))
        
        self.genImage.setText(_translate("MainWindow", "Run Image\nProcessing"))
        self.exportData.setText(_translate("MainWindow", "Export Data"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Run), _translate("MainWindow", "Run Scan"))
        self.groupBoxFanNames.setTitle(_translate("MainWindow", "Parameter Selection"))
        self.label_77.setText(_translate("MainWindow", "Moving Average"))
        self.label_6.setText(_translate("MainWindow", "Linear Average"))
        self.label_78.setText(_translate("MainWindow", "So on "))
        self.groupBoxCurrentFanStatus_4.setTitle(_translate("MainWindow", "Scanner Output Image"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabRenameFans), _translate("MainWindow", "Image Processing"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
    def setTitaniumSettings(self):
        #Function called when the recommended titanium settings button is pressed
        #sets the values for each parameter in the approriate UI element
        #change the value in parentheses after set value to change the default settings
        self.coilFrequency.setValue(400)
        self.coilAmplitude.setValue(3.8)
        self.sensorFrequency.setValue(33)
        self.sensorAmplitude.setValue(4)
        self.Xdimension.setValue(100)
        self.Xresolution.setValue(0.1)
        self.Ydimension.setValue(20)
        self.Yresolution.setValue(1)
        self.motorSpeed.setValue(20)
    def setCFRPSettings(self):
        #same as previous function just for CFRP
        self.coilFrequency.setValue(900)
        self.coilAmplitude.setValue(3.8)
        self.sensorFrequency.setValue(55)
        self.sensorAmplitude.setValue(4)
        self.Xdimension.setValue(100)
        self.Xresolution.setValue(0.5)
        self.Ydimension.setValue(2)
        self.Yresolution.setValue(1)
        self.motorSpeed.setValue(25)

    def setScanParams(self):
        #runs on pressing start scan
        now = datetime.now()


        #this is the parameter dictionary that defines the scanning parameters
        #frequency is in hertz, amplitude in Vrms, motor speed in the arbitrary tmcl units
        #gain refers to the gain set by the jumper on the sensor PCB, was left at 1000 but if changed will need to be changed here too
        #captures is a picoscope parameter -see picoscope 5000 series programming guide for more information and for ranges of sampling periods
        #resolutions (also can be seen in GUI) and voltage range and timebase
        self.parameterDictionary = {
            "coilFrequency" : self.coilFrequency.value()*10e2,
            "sensorFrequency" : self.sensorFrequency.value()*10e2,
            "coilAmplitude" :self.coilAmplitude.value(),
            "sensorAmplitude":self.sensorAmplitude.value(),
            "samplingPeriod" :  256,
            "picoTimebase" : 1e-9,
            "motorSpeed" : self.motorSpeed.value()*12,
            "mmMovedX"   : self.Xdimension.value(),
            "mmMovedY"   : self.Ydimension.value(),
            "xResolutionMm"   : self.Xresolution.value(),
            "yResolutionMm"   : self.Yresolution.value(),
            "captures"   : 1,
            "gain"       : 1000,
            "PicoResolution" : f'PS5000A_DR_{self.picoRes.currentText()}BIT',
            "PicoVoltageRange" : "PS5000A_5V",
            "PicoTimeBase": "PS5000A_NS",
            "filename" : now.strftime(f"Scan{self.scanCount}AtDate%d%mTime%H%M")
            }
        self.parameterDictionary["xStepRange"
        ],self.parameterDictionary["bufferSize"
        ],self.parameterDictionary["samplesPerPixel"
        ],self.parameterDictionary["yIncrement"
        ], self.parameterDictionary["nOfRows"
        ], self.parameterDictionary["samplingFrequency"] =  scanParams.calculateParameters(self.parameterDictionary)
        self.parameterDictionary["pixelsPerRow"] = self.parameterDictionary['bufferSize']/self.parameterDictionary['samplesPerPixel']
        #global variable to share parameter dictionary with scanning class. There is definitely a more elegant solution than this
        #illustrative of the fact this code was written under a lot of time pressure.
        global pd 
        pd = self.parameterDictionary
        print(pd)
        self.scanCount =+ 1
        
        
    def generateImage(self):
        #generate image code is in try/except as it will only run if enough data has been collected to form an image
        #if time allowed it should be changed so that the image processing code itself checks the dimensions of the results generated so far

        try:
            
            file = pd["filename"]
            #get user inputted colour map from UI element
            colourMap = self.colourMaps.currentText()
            if self.ipMode.currentIndex() == 1:
                if self.plotType.currentIndex() == 0:#if plot type set is 2D
                    #hide 3D contour plot UI element
                    self.sc.hide()
                    #run simple image processing code
                    simpleIP.showImage(file,colourMap)

                    
                    image = QtGui.QPixmap(f"./Results/{file}.png")
                    #position and show image in UI
                    self.OutImage.move(20,0)
                    self.OutImage.setPixmap(image)
                    self.movieLabel.hide()
                    self.OutImage.show()


                elif self.plotType.currentIndex() == 1: #if plot type set is 3D

                    self.OutImage.hide()

                    print('Running3dPlot')
                    x, y, z = contour.showContour(f'./Results/{file}.csv')
                    self.sc.axes.plot_surface(x,y,z,cmap=colourMap,linewidth=0,antialiased=False)
                    self.movieLabel.hide()

                    self.sc.show()


                
            elif self.ipMode.currentIndex() == 0: #run zhangs image processing
                
                if self.zhangSettings.currentIndex() == 0:#if titianium
                    #Zhangs image processing code
                    zhangFiles = ["TIrawimage_","TIbinarized_","TIlabel_"]
                    self.sc.hide()
                    
                    print("ENTERING ZHANGS IP")
                    APEX=TI(file)
                    APEX.loadcsv()
                    APEX.dimensionfit(pd["mmMovedX"],(pd["yResolutionMm"]*pd["rowsCovered"]))#size of real piece dimensions
                    APEX.zoomin() #set new horizontal length, vertical length automatically switched,600 recomended
                    APEX.preprocess()#median blur and CLAHE, CLAHE parameters are optional but median filter parameter cannot be changed
                    bina=APEX.morphology(self.binThresh.value())#parameter=binarization threshold , open &close kszie are optional
                    defects=APEX.skeletonize(bina)
                    area,center=APEX.defectinfo()
                    if self.outputFile.currentIndex() == 2:#if defect detection has been run
                        #update log in GUI
                        self.updateLog(f'Defect Number: {APEX.defectno}\nDefect Areas (mm^2): {APEX.reallength(area)} \nDefect Positions (mm): {APEX.realcenter(center)}')
                    
                    
                    fullFilename = zhangFiles[self.outputFile.currentIndex()] + file
                    #same as other IP, read image from file and show in GUI
                    image = QtGui.QPixmap(f"./Results/{fullFilename}.jpg")
                    self.OutImage.setPixmap(image)
                    self.movieLabel.hide()
                    self.OutImage.show()
                    self.OutImage.move(20,0)
                if self.zhangSettings.currentIndex() == 1:
                    #this part of the code needs to be rewritten to use CFRP code 
                    #From DIP file
                    self.movieLabel.hide()
                    self.sc.hide()

                    print("ENTERING ZHANGS IP")
                    file = pd["filename"]
                    APEX=TI(file)
                    APEX.loadcsv()
                    APEX.dimensionfit(pd["mmMovedX"],(pd["yResolutionMm"]*pd["rowsCovered"]))#size of real piece dimensions
                    APEX.zoomin() #set new horizontal length, vertical length automatically switched,600 recomended
                    APEX.preprocess()#median blur and CLAHE, CLAHE parameters are optional but median filter parameter cannot be changed
                    bina=APEX.morphology(self.binThresh.value())#parameter=binarization threshold , open &close kszie are optional
                    defects=APEX.skeletonize(bina)
                    area,center=APEX.defectinfo()
                    self.updateLog(f'Defect Number: {APEX.defectno}\nDefect Areas: {APEX.reallength(area)/2} \nDefect Positions: {APEX.realcenter(center)/2}')
                    print('TI information:')
                    print(APEX.defectno)
                    print(APEX.reallength(area))
                    print(APEX.realcenter(center))
                    
                    image = QtGui.QPixmap(f"./Results/TIlabel_{file}.jpg")
                    self.OutImage.setPixmap(image)
                    self.OutImage.show()
                    self.OutImage.move(20,0)

                    
     
           
                

        except:
            return 0
        
        # if(self.radioButton_2.isChecked()==True):
        #     if self.zhangSettings.currentText() == 'Titanium':


    
    def startScanThread(self):
        self.startScan.setDisabled(True)
        self.updateLog("Running Scan")
        if self.coilFrequency.value() == 0:
            self.updateLog("No scan parameters entered,\nUsing default titanium settings")
            self.setTitaniumSettings()
        
        
        self.OutImage.hide()
        self.sc.hide()
        self.setScanParams()
        self.movie = QtGui.QMovie("./Images/loglog.gif")
        self.movieLabel.setMovie(self.movie)
        self.movieLabel.show()
        self.movie.start()
        
        self.progressBar.setProperty("value", 0)
        self.thread = QtCore.QThread()
        # Step 3: Create a worker object
        self.worker = scanThread()
        # Step 4: Move worker to the thread
        self.worker.moveToThread(self.thread)
        # Step 5: Connect signals and slots
        self.thread.started.connect(self.worker.runScan)

        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        self.worker.progress.connect(self.updateProgress)
        self.worker.time.connect(self.updateTime)
        self.worker.earlyRows.connect(self.getRows)
        #self.worker.progress.connect(self.reportProgress)
        # Step 6: Start the thread
        print('starting thread')
        self.thread.start()
        print('running code after thread started')

       

    def updateProgress(self,percentComplete):
        self.progressBar.setProperty("value", percentComplete)
        if(percentComplete == 100):
            self.updateLog("Scan Complete")
            self.startScan.setDisabled(False)
        if(percentComplete == 0 ):
            self.updateLog("Scan Interrupted")
            self.startScan.setDisabled(False)
        #Image processing code is called here. Ideally it should be put into it's own thread and it will improve the performance of the code significantly

        self.generateImage()
    

    def editParams(self):
        self.tabWidget.setCurrentIndex(0)
    
    def switchToRun(self):
        self.tabWidget.setCurrentIndex(1)


    def quitScan(self):
        
        self.movieLabel.hide()

        self.updateLog("End Scan pressed \nScan will end upon completion of this row")
        self.worker.stop()
    
    def file_save(self):

        dir = str(QtWidgets.QFileDialog.getExistingDirectory(None, "Select Directory"))
        print(dir)
       
        
        datafile ='./Results/'+ pd["filename"] + '.csv'
        imagefile ='./Results/'+ pd["filename"] + '.png'
        paramsfile ='./Results/'+ pd["filename"] + '.json'

    

        resultsFolder = dir + "/" + pd["filename"]
        os.system(f'mkdir {resultsFolder}')
        os.system(f'copy {datafile}   {resultsFolder}')
        os.system(f'copy {imagefile}  {resultsFolder}')
        os.system(f'copy  {paramsfile} {resultsFolder}')
        self.updateLog(f"Data successfully exported to: \n{resultsFolder}")


        
    def btnstate(self,button):
        if button.text() == "      radioButton":
            if self.radioButton.isChecked() == False:
                self.radioButton.setChecked(True)
            self.radioButton_2.setChecked(False)
        if button.text() == "radioButton_2":
            if self.radioButton_2.isChecked() == False:
                self.radioButton_2.setChecked(True)
            self.radioButton.setChecked(False)
    def updateTime(self,timeRemaning):
        import math
        _translate = QtCore.QCoreApplication.translate
        self.timelabel.setText(_translate("MainWindow", f"Time Remaining: {math.floor(timeRemaning /60)} m  {int(timeRemaning %60)} s"))

    def updateLog(self,logText):
        _translate = QtCore.QCoreApplication.translate
        self.scanLogText.setText(_translate("MainWindow", logText))
        self.scanLogBlue.show()
        QtCore.QTimer.singleShot(1000, lambda: self.scanLogBlue.hide())
        # timer = QtCore.QTimer(None)
        # timer.timeout.connect(self.flashLog)
        # timer.start(1)
        
  

        
    


    def switchIP(self):
        if self.ipMode.currentIndex() == 1:
            self.groupBoxFan4_6.hide()
            self.groupBoxFan4_5.show()
        elif self.ipMode.currentIndex() ==0 :
            self.groupBoxFan4_5.hide()
            self.groupBoxFan4_6.show()
    def getRows(self, rows):
        pd["rowsCovered"] = rows

    

        

        
        
        
        

        



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    app.setWindowIcon(QtGui.QIcon('Images/logo.png'))
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    
    sys.exit(app.exec_())
